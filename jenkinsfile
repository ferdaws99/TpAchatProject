pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "M2_HOME"
    }
environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "172.10.0.140:8081"
        NEXUS_REPOSITORY = "demoapp-snapshot"
        NEXUS_CREDENTIAL_ID = "nexus-user-credentials"
        registry = 'mahdiksemtini/alpine'
        registryCredential = 'dockerHub'
        dockerImage = ''

    }

    stages {
        stage('GIT'){
            steps{
                echo 'Getting Project from GIT';
                git branch:"mahdi",
                url:'https://github.com/ferdaws99/TpAchatProject.git'
            }
}
stage('MVN CLEAN'){
    steps{
        sh 'mvn clean'
    }
}
stage('MVN COMPILE'){
    steps{
        sh 'mvn compile'
    }
}
stage('MVN TEST'){
    steps{
        sh 'mvn test'
    }
}
stage("Maven Build") {
            steps {
                script {
                    sh "mvn package -DskipTests=true"
                }
            }
        }

        stage('MVN SONARQUBE'){
    steps{
        sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=sonar'
    }
}

        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }

        stage('Building our image') {
                    steps {
                        script {
                            dockerImage = docker.build registry + ":$BUILD_NUMBER"
                        }
                    }
                }

        stage('Deploy our image') {
                            steps {
                                script {
                                    docker.withRegistry( '', registryCredential ) {
                                        dockerImage.push()
                                    }
                                }
                            }
                        }

        stage('Cleaning up') {
                    steps {
                        sh "docker rmi $registry:$BUILD_NUMBER"
                    }
                }


}
    }